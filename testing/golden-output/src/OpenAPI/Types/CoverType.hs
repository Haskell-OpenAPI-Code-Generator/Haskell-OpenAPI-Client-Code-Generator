-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema CoverType
module OpenAPI.Types.CoverType where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified OpenAPI.Common
import OpenAPI.TypeAlias
import {-# SOURCE #-} OpenAPI.Types.Mischling
import {-# SOURCE #-} OpenAPI.Types.PetByAge
import {-# SOURCE #-} OpenAPI.Types.Test6
import {-# SOURCE #-} OpenAPI.Types.Test7
import {-# SOURCE #-} OpenAPI.Types.Test8
import {-# SOURCE #-} OpenAPI.Types.Test9
import {-# SOURCE #-} OpenAPI.Types.Value

-- | Defines the object schema located at @components.schemas.CoverType@ in the specification.
-- 
-- 
data CoverType = CoverType {
  -- | cover
  coverType :: (GHC.Maybe.Maybe CoverTypeVariants)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CoverType
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cover" Data.Aeson.Types.ToJSON..=)) (coverType obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cover" Data.Aeson.Types.ToJSON..=)) (coverType obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON CoverType
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "CoverType" (\obj -> GHC.Base.pure CoverType GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cover"))}
-- | Create a new 'CoverType' with all required fields.
mkCoverType :: CoverType
mkCoverType = CoverType{coverType = GHC.Maybe.Nothing}
-- | Defines the oneOf schema located at @components.schemas.CoverType.properties.cover.oneOf@ in the specification.
-- 
-- 
data CoverTypeVariants =
   CoverTypePetByAge PetByAge
  | CoverTypeMischling Mischling
  | CoverTypeTest Test
  | CoverTypeTest2 Test2
  | CoverTypeTest3 Test3
  | CoverTypeTest4 Test4
  | CoverTypeTest5 Test5
  | CoverTypeTest6 Test6
  | CoverTypeTest7 Test7
  | CoverTypeTest8 Test8
  | CoverTypeTest9 Test9
  | CoverTypeTest10 Test10
  | CoverTypeValue Value
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CoverTypeVariants
    where {toJSON (CoverTypePetByAge a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (CoverTypeMischling a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (CoverTypeTest a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (CoverTypeTest2 a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (CoverTypeTest3 a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (CoverTypeTest4 a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (CoverTypeTest5 a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (CoverTypeTest6 a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (CoverTypeTest7 a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (CoverTypeTest8 a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (CoverTypeTest9 a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (CoverTypeTest10 a) = Data.Aeson.Types.ToJSON.toJSON a;
           toJSON (CoverTypeValue a) = Data.Aeson.Types.ToJSON.toJSON a}
instance Data.Aeson.Types.FromJSON.FromJSON CoverTypeVariants
    where {parseJSON val = case (CoverTypePetByAge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((CoverTypeMischling Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((CoverTypeTest Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((CoverTypeTest2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((CoverTypeTest3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((CoverTypeTest4 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((CoverTypeTest5 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((CoverTypeTest6 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((CoverTypeTest7 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((CoverTypeTest8 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((CoverTypeTest9 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((CoverTypeTest10 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((CoverTypeValue Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")))))))))))) of
                           {Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a;
                            Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a}}
