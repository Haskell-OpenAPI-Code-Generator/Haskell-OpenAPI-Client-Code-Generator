-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation singleParamWithFixedEnum
module OpenAPI.Operations.SingleParamWithFixedEnum where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified OpenAPI.Common
import OpenAPI.Types

-- | > GET /pet/singleparamwithfixedenum
-- 
-- Operation with a single fixed parameter
singleParamWithFixedEnum :: forall m . OpenAPI.Common.MonadHTTP m => SingleParamWithFixedEnumParametersFixedenumvalue -- ^ fixedenumvalue: A fixed value
  -> OpenAPI.Common.ClientT m (Network.HTTP.Client.Types.Response SingleParamWithFixedEnumResponse) -- ^ Monadic computation which returns the result of the operation
singleParamWithFixedEnum fixedenumvalue = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either SingleParamWithFixedEnumResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> SingleParamWithFixedEnumResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                     Dog)
                                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (OpenAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/pet/singleparamwithfixedenum" [OpenAPI.Common.QueryParameter (Data.Text.pack "fixedenumvalue") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON fixedenumvalue) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the enum schema located at @paths.\/pet\/singleparamwithfixedenum.GET.parameters.[0].schema@ in the specification.
-- 
-- Represents the parameter named \'fixedenumvalue\'
-- 
-- A fixed value
data SingleParamWithFixedEnumParametersFixedenumvalue =
   SingleParamWithFixedEnumParametersFixedenumvalueOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | SingleParamWithFixedEnumParametersFixedenumvalueTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | SingleParamWithFixedEnumParametersFixedenumvalueEnumThefixedvalue -- ^ Represents the JSON value @"thefixedvalue"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SingleParamWithFixedEnumParametersFixedenumvalue
    where toJSON (SingleParamWithFixedEnumParametersFixedenumvalueOther val) = val
          toJSON (SingleParamWithFixedEnumParametersFixedenumvalueTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (SingleParamWithFixedEnumParametersFixedenumvalueEnumThefixedvalue) = "thefixedvalue"
instance Data.Aeson.Types.FromJSON.FromJSON SingleParamWithFixedEnumParametersFixedenumvalue
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "thefixedvalue" -> SingleParamWithFixedEnumParametersFixedenumvalueEnumThefixedvalue
                                            | GHC.Base.otherwise -> SingleParamWithFixedEnumParametersFixedenumvalueOther val)
-- | Represents a response of the operation 'singleParamWithFixedEnum'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'SingleParamWithFixedEnumResponseError' is used.
data SingleParamWithFixedEnumResponse =
   SingleParamWithFixedEnumResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | SingleParamWithFixedEnumResponse200 Dog -- ^ successful operation
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | > GET /pet/singleparamwithfixedenum
-- 
-- The same as 'singleParamWithFixedEnum' but accepts an explicit configuration.
singleParamWithFixedEnumWithConfiguration :: forall m . OpenAPI.Common.MonadHTTP m => OpenAPI.Common.Configuration -- ^ The configuration to use in the request
  -> SingleParamWithFixedEnumParametersFixedenumvalue -- ^ fixedenumvalue: A fixed value
  -> m (Network.HTTP.Client.Types.Response SingleParamWithFixedEnumResponse) -- ^ Monadic computation which returns the result of the operation
singleParamWithFixedEnumWithConfiguration config
                                          fixedenumvalue = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either SingleParamWithFixedEnumResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> SingleParamWithFixedEnumResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Dog)
                                                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (OpenAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/pet/singleparamwithfixedenum" [OpenAPI.Common.QueryParameter (Data.Text.pack "fixedenumvalue") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON fixedenumvalue) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /pet/singleparamwithfixedenum
-- 
-- The same as 'singleParamWithFixedEnum' but returns the raw 'Data.ByteString.ByteString'.
singleParamWithFixedEnumRaw :: forall m . OpenAPI.Common.MonadHTTP m => SingleParamWithFixedEnumParametersFixedenumvalue -- ^ fixedenumvalue: A fixed value
  -> OpenAPI.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
singleParamWithFixedEnumRaw fixedenumvalue = GHC.Base.id (OpenAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/pet/singleparamwithfixedenum" [OpenAPI.Common.QueryParameter (Data.Text.pack "fixedenumvalue") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON fixedenumvalue) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /pet/singleparamwithfixedenum
-- 
-- The same as 'singleParamWithFixedEnum' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
singleParamWithFixedEnumWithConfigurationRaw :: forall m . OpenAPI.Common.MonadHTTP m => OpenAPI.Common.Configuration -- ^ The configuration to use in the request
  -> SingleParamWithFixedEnumParametersFixedenumvalue -- ^ fixedenumvalue: A fixed value
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
singleParamWithFixedEnumWithConfigurationRaw config
                                             fixedenumvalue = GHC.Base.id (OpenAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/pet/singleparamwithfixedenum" [OpenAPI.Common.QueryParameter (Data.Text.pack "fixedenumvalue") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON fixedenumvalue) (Data.Text.pack "form") GHC.Types.False])
